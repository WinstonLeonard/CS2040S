 List<Integer> DFSList = new ArrayList<>();
    public void modifiedDFS(HashMap<Integer, Integer> list, int source) {
        for (int i = 1; i < list.size(); i++) {
            if (list.get(i) == source) {
                this.DFSList.add(i);
                modifiedDFS(list, i);
            }
        }
    }

    @Override
    public void TSP(TSPMap map) {
        MST(map);
        // TODO: implement the rest of this method.

        //starting node
        int start = 0;

        //starting node is added
        this.DFSList.add(start);

        //(checked)
        //perform modified DFS
        for (int i = 1; i < map.getCount(); i++) {
            if (parent.get(i) == start) {
                //keep adding to the back
                this.DFSList.add(i);
                modifiedDFS(parent, i);
            }
        }

        //this should give the num of nodes should be equal to that of map
        int DFSListSize = DFSList.size();

        //link 2 nodes before and after
        for (int i = 0; i < DFSListSize - 1; i++) {
            map.setLink(DFSList.get(i), DFSList.get(i + 1), false);
        }

        //link the last to the origin
        if (map.getCount() > 0) {
            map.setLink(DFSList.get(DFSListSize - 1), DFSList.get(0),false);
        }

        map.redraw();
    }